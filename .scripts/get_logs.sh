#!/bin/bash

# This script helps debug issues by fetching two types of logs from Google Cloud:
# 1. Failed Vertex AI API audit logs to diagnose API-level errors (e.g., 403, 404).
# 2. Apps Script execution logs to trace the script's behavior (e.g., Logger.log).

# Ensure the environment is configured.
if [ -z "$PROJECT_ID" ]; then
  echo "Project ID not set. Sourcing configuration..."
  source "$(dirname "$0")/configure.sh"
fi

echo "Project: $PROJECT_ID"
echo "Checking logs from the last 30 minutes..."

echo ""
echo "--- Fetching Failed API Audit Logs (Vertex AI & AI Studio) ---"

# This command filters for audit logs showing any failed API call from either the Vertex AI
# or the Generative Language (AI Studio) APIs. By not filtering by a specific user,
# we can catch errors from any source, including the Apps Script runtime.
gcloud logging read "
  resource.type=\"audited_resource\"
  AND resource.labels.service=(\"aiplatform.googleapis.com\" OR \"generativelanguage.googleapis.com\")
  AND protoPayload.status.code != 0
  AND timestamp >= \"$(date -u -d '30 minutes ago' +'%Y-%m-%dT%H:%M:%SZ')\"
" --project="$PROJECT_ID" --format="json(protoPayload.authenticationInfo.principalEmail,protoPayload.methodName,protoPayload.resourceName,protoPayload.status,timestamp)"

echo "-----------------------------------------------------"
echo "Audit log query finished. If you see entries above, it confirms an API error on the Google Cloud side."
echo "Examine the log entries for the 'principalEmail' and the 'status' message:"
echo ""
echo "1. Find the log entry corresponding to your failed request."
echo "2. Look at the 'status' object for that entry:"
echo "   - 'message' containing 'API aiplatform.googleapis.com is not enabled': This is a common cause of 403 errors. Enable it with:"
echo "     gcloud services enable aiplatform.googleapis.com --project \"$PROJECT_ID\""
echo "   - 'code: 7' (PERMISSION_DENIED): The 'principalEmail' shown in the log needs the 'Vertex AI User' (roles/aiplatform.user) role. 'source .scripts/configure.sh' should grant this to your user."
echo "   - 'code: 5' (NOT_FOUND / 404 Error): This means the requested resource (like a model or project) doesn't exist. Check that the model name in Main.gs is correct for the API being used (Vertex AI vs. AI Studio) and that the region/project ID are correct."
echo "   - 'code: 3' (INVALID_ARGUMENT): The request payload sent to Gemini is malformed. Check the 'callGemini' function in Main.gs."
echo ""
echo "If the log is STILL empty after reproducing the 403 error, the issue is likely with Apps Script's own permissions or configuration, not the GCP project's API."

echo ""
echo ""
echo "--- Fetching Apps Script Execution Logs ---"
echo "These are logs from Logger.log() and exceptions inside your .gs files."
echo "-----------------------------------------------------"

# This command filters for logs generated by the Apps Script runtime itself.
gcloud logging read "
  resource.type=\"app_script_function\"
  AND timestamp >= \"$(date -u -d '30 minutes ago' +'%Y-%m-%dT%H:%M:%SZ')\"
" --project="$PROJECT_ID" --format="table(timestamp.date(tz=LOCAL), resource.labels.function_name, severity, textPayload)"

echo "-----------------------------------------------------"
echo "Apps Script log query finished."
echo ""
echo "--- TROUBLESHOOTING: If ALL logs are empty ---"
echo "If you get an error in the UI but both log sections above are empty, it almost always means"
echo "your Apps Script project is sending its logs to a DIFFERENT Google Cloud project."
echo ""
echo "TO FIX THIS:"
echo "1. Open your Apps Script project in the browser."
echo "2. Click 'Project Settings' (the gear icon on the left)."
echo "3. Under 'Google Cloud Platform (GCP) Project', click 'Change project' and set it to '$PROJECT_ID'."
echo ""
echo "NOTE: If you get an error about configuring the 'OAuth consent screen' when changing the project,"
echo "you must complete that one-time setup in the Google Cloud Console for project '$PROJECT_ID' before you can link it."